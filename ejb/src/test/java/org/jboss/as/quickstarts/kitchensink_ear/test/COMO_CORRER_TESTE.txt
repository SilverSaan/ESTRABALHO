

Tutorial principal
http://www.mastertheboss.com/jboss-frameworks/arquillian/arquillian-tutorial/

tutorial parecido
https://docs.jboss.org/arquillian/reference/1.0.0.Alpha1/en-US/html_single/

NOTA: Nestes ficheiros existem algumas diferenças do Tutorial, o exemplo kitchensynk já tras os plugins necessários a correr
os testes com o Arquilian, algumas coisas são diferentes
 - Diferenca Identificadada no PONTO *** marcado abaixo na linha que declara o JBOSS HOME

A classe de Teste tem de terminar em *Test caso contrario o surfire não a deteta.
Não é necessário adicionar o plugin surfire aos pom's porque já é implicito em todos os packagings, ejb ear, war, etc
É necessário usar as dependencias
<dependency>
 <groupId>org.jboss.arquillian.junit</groupId>
 <artifactId>arquillian-junit-container</artifactId>
 <scope>test</scope>
</dependency>
<dependency>
 <groupId>org.jboss.arquillian.protocol</groupId>
 <artifactId>arquillian-protocol-servlet</artifactId>
 <scope>test</scope>
</dependency>

que já vinham com o kitchensynk mas é necessário ativar um container que deve ser colocado num profile para não ligar sempre:
<profile>
   <!-- Run with: mvn clean test -Parq-managed -->
   <id>arq-managed</id>
   <dependencies>
      <dependency>
         <groupId>org.wildfly.arquillian</groupId>
         <artifactId>wildfly-arquillian-container-managed</artifactId>
         <scope>test</scope>
      </dependency>
   </dependencies>
</profile>

Para que isto funcione com o JBOSS Local temos de alterar o ficheiro aequilian.xml para identificar o EAP_HOME


por exemplo: *** difere do tutorial mas apenas este funciona que seria como vem no exemplo do kitchensynk

<container qualifier="jboss" default="true">
    <!-- By default, Arquillian will use the JBOSS_HOME environment variable to find the JBoss EAP installation.
         If you prefer not to define the JBOSS_HOME environment variable, alternatively you can uncomment the
         following `jbossHome` property and replace EAP_HOME with the path to your JBoss EAP installation. -->
    <configuration>
        <property name="jbossHome">/Users/jorgemachado/workspace/Servers/jboss-eap-7.1-pae</property>
    </configuration>
</container>

Usar um JBOSS Vazio

Atenção os testes com o Arquillian usam um datasource H2

Atenção os testes com o Arquilian ligam o JBOSS e definem todos os recursos da arquitetura EE exemplo
no ficheiro src/test/java/..../TestarAlunoBdTest.java
Repare que na pasta resources tem vários ficheiros que são recursos habituais do JBOSS
Neste caso são incluidos para uso para emular o ambiente da APP EE onde o teste vai correr
Nota: O CDI Funciona
Seeliminarmos a linha 2 e descomentarmos a linha 1 não teremos os prints dos interceptores durante o teste

NOTA IMPORTANTE: O teste só funciona com o profile arq-managed activo, pode ativa-lo no INTELIJ
clicando na checkbox no painel do Maven/Profiles

 @Deployment
    public static Archive<?> createTestArchive() {
        return ShrinkWrap.create(WebArchive.class, "test.war")

            .addClasses(Aluno.class, AlunosService.class, Resources.class, Auditavel.class, AuditAnnotation.class, AuditedInterceptor.class)
            .addAsResource("META-INF/test-persistence.xml", "META-INF/persistence.xml")

            //.addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")     //LINHA 1 DA EXPLICACAO
            .addAsResource("META-INF/beans.xml", "META-INF/beans.xml")   //LINHA 2 DA EXPLICACAO

             // Deploy our test datasource
            .addAsWebInfResource("test-ds.xml", "test-ds.xml");
    }


###########################################################################
TESTAR JPA FORA DO CONTAINER

Sempre que desejamos testar uma funcionalidade que usa o JPA temos de fazer o bootstrap do JPA
Se não usarmos o JBOSS nem o Arquillian, ou seja, sem container EE, para fazer o bootstrap (inicialização) do JPA temos
de o inicializar manualmente. Isso não vai ser feito neste exercicio mas poderão consultar como o fazer aqui:

https://docs.oracle.com/middleware/1212/toplink/TLADG/testingjpa.htm#TLADG394

