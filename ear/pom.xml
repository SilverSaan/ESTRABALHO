<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.jboss.eap.quickstarts</groupId>
        <artifactId>kitchensink-ear</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>kitchensink-ear-ear</artifactId>
    <packaging>ear</packaging>

    <name>kitchensink-ear - ear</name>
    <description>This kitchensink project demonstrates how to use JSF, CDI, JAX-RS, EJB, JPA, and Bean Validation in an application packaged as an EAR; this is the EAR POM file</description>


    <!-- ###ALTERACOES TESTES IT

        ####Descrição do procedimento que vai ser executado:####

          Ao correr a phase Verify com o profile arq-managed ativo, este pom vai compilar o ficheiro de testes
          e colocar o mesmo na pasta target/test-classes que é a pata de classes compiladas consideradas no run
          de todos os módulos do MAVEN que usam testes, isto mais as dependencias, obviamente.
          Este procedimento copia ainda o ficheiro arquillian.xml que está na pasta test/resources para o mesmo
          local, porque existirão módulos do Arquillian que vão à procura deste ficheiro quando forem executados,
          os unicos sitios seriam a pasta das classes compiladas ou os JARS, mas os jars não têm lá nada relativo a
          este ficheiro, porque é um ficheiro que deve ser definido pelo programador.


        #MODO DE FUNCIONAMENTO DE TESTES
        Para correr testes neste módulo vamos usar o Arquillian, tal como usamos no módulo EJB-JAR, no entanto
         no módulo EJB-JAR , as classes de testes usam o shrinkwrap para criar o ambiente de classes e configurações
         minimas para preparar o ambiente EE e correr os testes em causa, sendo isto definido em cada teste (Ver src/test/java no módulo ejb)
         mas neste caso isso seria muito complexo de alcançar, nesse sentido necessitamos de ter o EAR já construido, pois o nosso objetivo
         é testar Páginas e serviços REST, ou seja a camada mais exposta da nossa Aplicação empresarial.

         Para isto poder acontecer temos de correr a fase PACKAGE no Módulo ROOT para compilar todos os módulos o WEB e o EJB-JAR
         e depois este módulo constroi o EAR, este módulo.

        Como NÃO desejamos correr os testes de Integração antes de construir os pacotes porque isso  seria impossivel,
        uma vez que não temos os artefactos WAR nem JAR nem o seu agregador, o EAR, estes testes não podem ser corridos
        na fase test, fase essa que é tratada pelo plugin surfire do Maven. Assim sendo, caso estivessemos na módulo
         EJB ou WAR e necessitassemos de correr testes de integração, nunca poderiamos usar o surfire,
         porque ele está associado à fase test, que corre antes do package, assim sendo as classes não podem ter no seu nome o
         padrão *Test* senão o surfire iria tentar corre-las logo após o compile.

         Neste caso como estamos num package EAR (Que está definido no inicio deste ficheiro <packaging>ear</packaging>),
         o package do EAR não invoca a fase de testes (ver ciclo de fases do PACKAGING EAR
         https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
            1 - generate-resources	ear:generate-application-xml
            2 - process-resources resources:resources
            3 - package	ear:ear
            4 - install	install:install
            5 - deploy	deploy:deploy ),
         por isso poderiamos nós
         tratar de atribuir o plugin surfire à fase verify manualamente. No entanto o plugin failsafe foi desenvolvido
         para isso mesmo uma vez que já está associado à fase verify mas sem goals atribuidos, que corre precisamente depois do package,
         portanto pode ser usado em qualquer módulo, tanto EJB, como WAR como EAR porque está feito
         de propósito para não ser invocado em nenhuma fase. No entanto é um plugin feito para correr a moldura de testes
         JUNIT. Assim sendo o procedimento habitual é criar um perfil para associar o FAILSAFE ou o SURFIRE, neste caso vamos
         usar o FAILSAFE que está associado à fase de testes de integração ou VERIFY mas ainda não tem nenhum goal atribuido,
         vamos por isso atribuir os goals verify e integration-tests que são os que preparam e correm os testes terminados em IT.
         Note-se que o surfire, por omissão apenas procura classes com o padrão *Test* enquanto o failsafe procura classes com o padrão
         *IT que é o que nos interessa, e desta forma não deixamos o surfire correr coisa nenhuma na fase test.



        Alterações ao POM para correr os testes com o Arquillian

        Foi adicionado a este ficheiro o profile arq-managed, só se for ativo é que é executado, agora neste profile vamos
        adicionar tudo o que necessitamos para correr os testes

            1 - Necessitamos de colocar a dependencia do plugin wildfly-arquillian-container-managed que é invocado a partir
                dos testes no momento em que colocamos a Anotação @RunWith(Arquillian.class) (ver src/test/java/..etc../FormStrutsIT.java)
            2 - Note-se que o Arquillian sendo um container de plataformas EE para testes não vai executar por si, será a classe de testes
                que ao ser invocada faz correr o Arquillian
            3 - Para isso necessitamos de ter a classe compilada, e neste caso como estamos perante um EAR, não temos fase de compile
                então neste perfil vamos associar o plugin maven-compiler-plugin e também o maven-resources-plugin para não só compilar
                o código da classe para o target/test-classes mas também para copiar o ficheiro src/test/resources/arquillian.xml para
                a mesma pasta, uma vez que o Arquillian vai necessitar disto mesmo
            4 - Necessitamos de dependencias para o Arquillian, poderão ser colocadas aqui no perfil ou lá em baixo nas dependencies, é
                indiferente, este módulo não erve para nada a não ser para empacotar os dois módulos WEB e EJB num EAR, assim sendo
                não tem quaisquer dependecias de seja o que for a não ser desses dois módulos, portanto é indiferente deixar as dependencias
                lá em baixo para o módulo inteiro como adiciona-las aqui no profile, vamos deixa-las lá em baixo. (Ver nas dependencias
                o que está entre comentários ARQUILLIAN_DEPENDENCIAS)

                Essencialmente o JUNIT, as Anotações (org.jboss.spec.javax.annotation), O Módulo de JUNIT do Arquillian para o JBOSS
                (org.jboss.arquillian.junit), um conjunto de implementações protocolares do Arquillian para JBOSS org.jboss.arquillian.protocol
                que poderia ser outro por exemplo para o glassfish, o CDI porque a classe usa o CDI para injetar o entityManager e o hibernate JPA
                  <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.spec.javax.annotation</groupId>
                    <artifactId>jboss-annotations-api_1.2_spec</artifactId>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.arquillian.junit</groupId>
                    <artifactId>arquillian-junit-container</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.arquillian.protocol</groupId>
                    <artifactId>arquillian-protocol-servlet</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>javax.enterprise</groupId>
                    <artifactId>cdi-api</artifactId>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>org.hibernate.javax.persistence</groupId>
                    <artifactId>hibernate-jpa-2.1-api</artifactId>
                    <scope>provided</scope>
                </dependency>



            #DATASOURCES
            Relembramos que no caso dos testes de integração aqui é diferente dos que correm no módulo EJB JAR, nesse caso
            são adulterados os recursos de Datasource uma vez que o próprio ambiente é criado manualmente,
            ver ficheiro ejb/src/test/java/..../AlunoBdIT
            Nesse caso é adicionado um ficheiro de datasources ao ambiente que está definido na pasta de test/resources do Módulo EJB
            e ai criamos um Datasource para h2 e outro para MySql mas que na prática está associado à BD "es", mas podia ser outra
            Aqui a lição a retirar é que durante os testes de integração do Módulo EJB podemos usar uma base de dados de testes definida
            por um datasource especifico que é associado no próprio ambiente do Teste.

            Aqui (No ficheiro FormStrutsIT) também o poderiamos fazer, usando o código do Arquillian poderiamos ir dentro do EAR buscar a app EJB-JAR e substituir o
            ficheiro persistence.xml e mudar o descritor do Datasource, mas não é isso que se pretende. Pretende-se correr sim
            testes de integração/Instalação finais que devem usar o ambiente final de instalação. Assim sendo e considerando que o
            Arquillian vai executar um JBOSS de testes que poderá não ter o Datasource definido, vamos adicionar um datasource ao ficheiro
            src/main/application/META-INF/kitchensink-ear-quickstart-ds.xml que pela sua natureza a compilação do EAR vai colocar esse ficheiro
            dentro da META-INF do EAR e portanto o JBOOS vai imediatamente instalar esses datasources, caso o JBOSS seja o Final
            o que é especificado no ficheiro arquillian.xml que está nos resources de testes então não necessitamos de o fazer, neste caso o que foi feito
            foi adicionar as linhas seguintes ao ficheiro de datasources referido, onde java:/MySqlES é precisamente o nome do JNDI definido dentro
            do persistence.xml do módulo EJB JAr para usar com o JPA.

            <datasource jta="false" jndi-name="java:/MySqlES" pool-name="MySqlES" enabled="true" use-ccm="false">
                <connection-url>jdbc:mysql://localhost:3306/es</connection-url>
                <driver-class>com.mysql.jdbc.Driver</driver-class>
                <driver>mysql-connector-java-5.1.47-bin.jar_com.mysql.jdbc.Driver_5_1</driver>
                <security>
                    <user-name>root</user-name>
                </security>
                <validation>
                    <valid-connection-checker class-name="org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker"/>
                    <background-validation>true</background-validation>
                    <exception-sorter class-name="org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter"/>
                </validation>
            </datasource>

            LINKS IMPORTANTES

            https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
            http://www.mastertheboss.com/jboss-frameworks/arquillian/arquillian-tutorial/
            https://docs.jboss.org/arquillian/reference/1.0.0.Alpha1/en-US/html_single/
            https://jwebunit.github.io/jwebunit/quickstart.htmlwildfly-arquillian-container-managed
            JWEB_UNIT TUTORIAL
            https://jwebunit.github.io/jwebunit/quickstart.html



            Problemas comuns quando os testes não correm
            - Para correr os testes temos decorrer a fase >>>verify<<< deste POM
            - O Nome dos ficheiros de teste tem de terminar em IT
            - O ficheiro arquillian.xml tem de estar nas classes compiladas dos test (test-classes) do modulo onde pretendemos executar
              e tem de ter o caminho correto para ao JBOSS
            - O Datasource não existe no JBOSS, verificar se o src/main/application/kitchensink-ear-quickstart-ds.xml tem lá o datasource e está correto
              verificar se a base de dados existe.
            - Verificar se as classes de testes e a do arquillian.xml estão na pasta target/test.classes
            - Verificar se já temos o target/kitchensink-ear.ear na pasta, se não temos de correr o package no POM da raiz só depois o verify

    -->



    <profiles>

        <!-- PROFILE PARA CORRER O JBOSS CONTAINER DO ARQUILIAN -->
        <profile>
            <!-- Run with: mvn clean test -Parq-managed -->
            <id>arq-managed</id>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-managed</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                <!--<plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.22.1</version>

                        <executions>
                            <execution>
                                <id>test</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>-->
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>2.22.0</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <!--<configuration>
                            <environmentVariables>
                                <JBOSS_HOME>/Users/jorgemachado/workspace/ES/jboss-eap-7.1</JBOSS_HOME>
                            </environmentVariables>
                            <systemPropertyVariables>
                                <arquillian.launch>wildfly-managed</arquillian.launch>
                                <serverConfig>standalone.xml</serverConfig>
                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                            </systemPropertyVariables>
                        </configuration>-->
                    </plugin>

                    <!--
                        Estas configurações são necessárias porque o package ear não vai compilar nada nem copiar
                        o ficheiro de recursos que é necessário para o modulo do Arquillian saber onde está o JBOSS
                        Ver aqui os lifecycles do MAVEN para confirmar que o EAR não compila nem copia recursos
                        https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
                    -->
                    <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.8.0</version>
                        <executions>
                            <execution>
                                <id>compile</id>
                                <phase>test-compile</phase>
                                <goals>
                                    <goal>testCompile</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.0.2</version>
                        <executions>
                            <execution>
                                <id>process-test-resources</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>testResources</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <!--  // ALTERACOES TESTES IT -->

    <dependencies>


        <!--COPIADAS DO PARENT DO PROJETO DE EXEMPLO DO ARQUILLIAN-->


        <!-- Nãoforam necessárias mas ficam aqui para alguma necessidade futura

        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>7.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian</groupId>
            <artifactId>arquillian-bom</artifactId>
            <version>1.1.7.Final</version>
            <scope>test</scope>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-bom</artifactId>
            <version>2.2.0-beta-1</version>
            <scope>test</scope>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-container-remote</artifactId>
            <version>1.0.0.Alpha5</version>
            <scope>test</scope>
        </dependency>

        -->


        <!--#############################################################
        #####   DEFINICAO QUE CRIA A EAR COM O WAR E O JAR
        ######################################################################

        NOTAS: O facto destas dependecias terem o type preenchido é o que faz com que este packaging as use na criação do EAR
        as restantes dependecias são apenas para compilações das classes de testes e são dependencias normais para import
        e uso de bibliotecas, mas estas são de empacotamento
        -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>kitchensink-ear-ejb</artifactId>
            <type>ejb</type>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>kitchensink-ear-web</artifactId>
            <type>war</type>
        </dependency>
        <!--#####DEFINICAO QUE CRIA A EAR COM O WAR E O JAR-->



        <!--#############################################################
        #####   ARQUILLIAN_DEPENDENCIAS
            BIBLIOTECAS ADICIONADAS AO EAR POM PARA FAZER TESTES DE INTEGRACAO COM ARQUILIAN USANDO COMO BASE O EAR INTEIRO
        ######################################################################-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.spec.javax.annotation</groupId>
            <artifactId>jboss-annotations-api_1.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP -->
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.1-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- ARQUILLIAN_DEPENDENCIAS -->


        <!--####################################
        DEPENDECIAS PARA O JWEBUNIT ADICIONAR APENAS SE TIVER TESTES QUE USEM O JWEBUNIT
        -->
        <dependency>
            <groupId>net.sourceforge.jwebunit</groupId>
            <artifactId>jwebunit-htmlunit-plugin</artifactId>
            <version>3.3</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>net.sourceforge.jwebunit</groupId>
            <artifactId>jwebunit-core</artifactId>
            <version>3.3</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>net.sourceforge.jwebunit</groupId>
            <artifactId>jwebunit-commons-tests</artifactId>
            <version>2.4</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.6</version>
            <scope>test</scope>
        </dependency>
        <!--####################################
        DEPENDECIAS PARA O JWEBUNIT
        -->
        <!--####################################
           DEPENDECIAS PARA O JAX RS
               -->
        <dependency>
            <groupId>org.jboss.spec.javax.ws.rs</groupId>
            <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
            <scope>provided</scope>
        </dependency>
        <!--####################################
           DEPENDECIAS PARA O JAX RS
               -->


    </dependencies>




    <build>
        <finalName>${project.parent.artifactId}</finalName>
        <plugins>
            <!--O Invocar por si só deste plugin faz com que o EAR seja construido na fase de package com o WAR e o EJB -JAR que são
            colocados como dependncias no cimo deste ficheiro-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-ear-plugin</artifactId>
                <configuration>
                    <!-- Tell Maven we are using Java EE -->
                    <version>7</version>
                    <!-- Use Java EE ear libraries as needed. Java EE ear libraries
                        are in easy way to package any libraries needed in the ear, and automatically
                        have any modules (EJB-JARs and WARs) use them -->
                    <defaultLibBundleDir>lib</defaultLibBundleDir>
                    <modules>
                        <!-- Default context root of the web app is /kitchensink-ear-web.
                        If a custom context root is needed, uncomment the following snippet to
                        register our War as a web module and set the contextRoot property -->
                        <!--
                    <webModule>
                        <groupId>org.jboss.eap.quickstarts</groupId>
                        <artifactId>kitchensink-ear-web</artifactId>
                        <contextRoot>/kitchensink-ear</contextRoot>
                    </webModule>
                    -->
                    </modules>
                    <fileNameMapping>no-version</fileNameMapping>
                </configuration>
            </plugin>
            <!-- The WildFly plug-in deploys your ear to a local JBoss EAP container. 
                Due to Maven's lack of intelligence with EARs we need to configure
                the WildFly Maven plug-in to skip deployment for all modules. We then enable
                it specifically in the ear module.


                 Este plugin está associado à fase de install para colocar o módulo no JBOSS EAP 7 ou wildfly-->
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <configuration>
                    <skip>false</skip>
                </configuration>
            </plugin>
        </plugins>

        <!-- Aqui estamos apenas a colocar algumas definições adicionais dos módulos surfire e failsafe, apesar de não usarmos o surfire neste
           caso colocamos aqui à mesma para ilustração, Já o FailSafe está definido aqui para usar os GOALS verify e integration-test mas não era
            necessário, porque já está no profile, aqui apenas adiciona uma definição que são todas as classes terminadas em IT ou ITCase, mas também isso
            seria desnecessário, é apenas para ilustrar como se altera este tipo de definição. Todos os Módulos aqui definidos, neste elemento pluginManagement
            são apenas isso mesmo, DEFINIDOS, nada disto obriga a executar seja o que for, para mandar executar um plugin numa fae temos de usar o elemento
            build/plugins que está acima deste comenário, aqui apenas se colocam definições, sejam de módulos que dependam no geral ou em perfis-->
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.1</version>
                    <configuration>
                        <excludes>
                            <exclude>**/*IT</exclude>
                        </excludes>
                        <includes>
                            <include>**/Test*</include>
                            <include>**/*Test</include>
                        </includes>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.22.0</version>
                    <configuration>
                        <includes>
                            <include>**/*IT</include>
                            <include>**/*ITCase</include>
                        </includes>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>

        </pluginManagement>
    </build>




    <!--
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-ear-plugin</artifactId>
                <configuration>
                    <modules>
                        <ejbModule>
                            <groupId>arquillian-ear</groupId>
                            <artifactId>ejb-jar</artifactId>
                        </ejbModule>
                    </modules>
                </configuration>
            </plugin>
        </plugins>
    </build>-->
</project>
